// set up a simple neutral simulation
initialize()
{
	// set the overall mutation rate per base position per generation
	initializeMutationRate(1e-7);

	// "m1" mutation type: m1=neutral; 0.5=dominance (ignored), f=fixed dfe, 0=s
	initializeMutationType("m1", 0.5, "f", 0.0);

	// "g1" genomic element type: m1 for all mutations. This creates a new genomic element type named "g1". A genomic element type represents a particular type of chromosomal region â€“ introns, exons, UTRs, etc. Here, the genomic element type "g1" is defined as using mutation type m1 for all of its mutations (as specified by the proportion 1.0, supplied as the third parameter).
	initializeGenomicElementType("g1", m1, 1.0);

	// initialize a uniform chromosome of length 100 kb: This callback uses "g1" to set up the genomic element. Here, "g1" is 100 kb in length, ranging from position 0 to 99999.
	initializeGenomicElement(g1, 0, 99999);

	// uniform recombination along the chromosome
	initializeRecombinationRate(0);

	// definine Y chromosomes
	initializeSex("Y");
}

// now create 1 population of 500 individuals
// this is scheduled to run at generation 1; the very beginning of the simulation
// note that slim simulates diploids: therefore, 1000 individuals are needed for a population of 500 Y chromosomes
//finally, output the data from all 500 males in MS format
1 { sim.addSubpop("p1", 1000); }
10000 late() { p1.outputMSSample(500,requestedSex="M"); }